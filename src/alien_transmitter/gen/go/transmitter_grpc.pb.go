// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: transmitter.proto

package transmitter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransmitterService_Transmit_FullMethodName = "/transmitter.TransmitterService/Transmit"
)

// TransmitterServiceClient is the client API for TransmitterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransmitterServiceClient interface {
	Transmit(ctx context.Context, in *Request, opts ...grpc.CallOption) (TransmitterService_TransmitClient, error)
}

type transmitterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransmitterServiceClient(cc grpc.ClientConnInterface) TransmitterServiceClient {
	return &transmitterServiceClient{cc}
}

func (c *transmitterServiceClient) Transmit(ctx context.Context, in *Request, opts ...grpc.CallOption) (TransmitterService_TransmitClient, error) {
	stream, err := c.cc.NewStream(ctx, &TransmitterService_ServiceDesc.Streams[0], TransmitterService_Transmit_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &transmitterServiceTransmitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransmitterService_TransmitClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type transmitterServiceTransmitClient struct {
	grpc.ClientStream
}

func (x *transmitterServiceTransmitClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransmitterServiceServer is the server API for TransmitterService service.
// All implementations must embed UnimplementedTransmitterServiceServer
// for forward compatibility
type TransmitterServiceServer interface {
	Transmit(*Request, TransmitterService_TransmitServer) error
	mustEmbedUnimplementedTransmitterServiceServer()
}

// UnimplementedTransmitterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransmitterServiceServer struct {
}

func (UnimplementedTransmitterServiceServer) Transmit(*Request, TransmitterService_TransmitServer) error {
	return status.Errorf(codes.Unimplemented, "method Transmit not implemented")
}
func (UnimplementedTransmitterServiceServer) mustEmbedUnimplementedTransmitterServiceServer() {}

// UnsafeTransmitterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransmitterServiceServer will
// result in compilation errors.
type UnsafeTransmitterServiceServer interface {
	mustEmbedUnimplementedTransmitterServiceServer()
}

func RegisterTransmitterServiceServer(s grpc.ServiceRegistrar, srv TransmitterServiceServer) {
	s.RegisterService(&TransmitterService_ServiceDesc, srv)
}

func _TransmitterService_Transmit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransmitterServiceServer).Transmit(m, &transmitterServiceTransmitServer{stream})
}

type TransmitterService_TransmitServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type transmitterServiceTransmitServer struct {
	grpc.ServerStream
}

func (x *transmitterServiceTransmitServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// TransmitterService_ServiceDesc is the grpc.ServiceDesc for TransmitterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransmitterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transmitter.TransmitterService",
	HandlerType: (*TransmitterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transmit",
			Handler:       _TransmitterService_Transmit_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transmitter.proto",
}
